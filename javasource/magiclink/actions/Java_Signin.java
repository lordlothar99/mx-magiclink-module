// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package magiclink.actions;

import java.util.HashMap;
import com.mendix.core.Core;
import com.mendix.externalinterface.connector.RequestHandler;
import com.mendix.m2ee.api.IMxRuntimeRequest;
import com.mendix.m2ee.api.IMxRuntimeResponse;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.ISession;
import com.mendix.systemwideinterfaces.core.IUser;
import com.mendix.webui.CustomJavaAction;

public class Java_Signin extends CustomJavaAction<java.lang.Void>
{
	private java.lang.String username;
	private java.lang.String UUID;

	public Java_Signin(IContext context, java.lang.String username, java.lang.String UUID)
	{
		super(context);
		this.username = username;
		this.UUID = UUID;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		// BEGIN USER CODE
		
		if( !handlerStarted ) {
			Core.addRequestHandler("signin/", new SignInHandler());
			handlerStarted = true;
		}
		
		openUserRequests.put(UUID, Core.getUser(getContext(), this.username) );
		
		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "Java_Signin";
	}

	// BEGIN EXTRA CODE
	
	private static boolean handlerStarted = false;
	private static HashMap<String, IUser> openUserRequests = new HashMap<>();
	
	private static String appLocation = Core.getConfiguration().getApplicationRootUrl();
	
	public static class SignInHandler extends RequestHandler {
		
		@Override
		protected void processRequest( IMxRuntimeRequest request, IMxRuntimeResponse response, String arg2 ) throws Exception {
			String uuid = request.getParameter("uuid");
			
			if( uuid != null ) {
				
				if( openUserRequests.containsKey(uuid) ) {
					IUser user = openUserRequests.remove(uuid); 
					if( user != null && user.isActive() && !user.isAnonymous() && !user.isBlocked() ) {
						ISession session = Core.initializeSession(user, (this.getSessionFromRequest(request) != null ? this.getSessionFromRequest(request).getId().toString() : null));
	
						response.addCookie(this.getSessionCookieName(), session.getId().toString(),  "/", "", -1, true);
						response.addCookie("XASID", "0."+Core.getXASId(),"/", "", -1, true);
					}
				}
				else 
					Core.getLogger("SigninHandler").info("Unable to find UUID " + uuid);
			}
			else 
				Core.getLogger("SigninHandler").info("No UUID provided");
			
			
			response.setStatus(IMxRuntimeResponse.SEE_OTHER);
			response.addHeader("location", appLocation);
		}
		
	}
	// END EXTRA CODE
}
